<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>com.example.domaingenerator</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>Domain Class Generator (Ctrl+Shift+E)</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="support@domaingenerator.dev" url="https://github.com/domain-class-generator">
        Domain Class Generator Team
    </vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
    <h2>Domain Class Generator</h2>
    <p>Generate domain classes from library classes with Lombok annotations support.</p>

    <h3>Why Use This Plugin?</h3>
    <p>
      Using external library data objects directly in your application's domain layer can be <b>unreliable and unsecured</b>:
    </p>
    <ul>
        <li><b>Version Changes:</b> External libraries may change class structures in updates, breaking your code</li>
        <li><b>Security Risks:</b> Library classes may expose unnecessary fields or methods that create vulnerabilities</li>
        <li><b>Tight Coupling:</b> Direct dependency on external models makes your domain fragile and hard to maintain</li>
        <li><b>Lack of Control:</b> You cannot customize serialization, validation, or behavior of library classes</li>
        <li><b>Testing Difficulties:</b> Mocking and testing with external library objects is often complex</li>
    </ul>
    <p>
      <b>Solution:</b> This plugin helps you create <b>your own copy</b> of the class structure in your domain layer,
      giving you full control, stability, and security. You can then map between external objects and your domain models
      using tools like MapStruct or ModelMapper.
    </p>

    <h3>Features</h3>
    <ul>
        <li>Generate domain classes and enums from any library package to your target package</li>
        <li>Automatically follows extension/superclass structure</li>
        <li>Preserves enum constructors and constant declarations</li>
        <li>Configure Lombok annotations (@Builder, @Data, @Getter, @Setter, etc.)</li>
        <li>Generate JavaDoc documentation with source information</li>
        <li>Easy-to-use configuration UI for package selection and annotation options</li>
        <li>Keyboard shortcut: Ctrl+Shift+E (Cmd+Shift+E on Mac)</li>
    </ul>

    <h3>Usage</h3>
    <p>
      1. Place your cursor in any Java file (library class)<br/>
      2. Press Ctrl+Shift+E (or Cmd+Shift+E on Mac)<br/>
      3. Select the source package (library classes)<br/>
      4. Select the target package (where to generate classes)<br/>
      5. Choose Lombok annotations to add<br/>
      6. Enable/disable JavaDoc generation<br/>
      7. Click OK to generate!
    </p>
  ]]></description>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>
    <!-- Required for Java PSI support -->
    <depends>com.intellij.java</depends>

    <!-- Actions: User-triggerable operations -->
    <actions>
        <action id="com.example.domaingenerator.GenerateDomainClassesAction"
                class="com.example.domaingenerator.actions.GenerateDomainClassesAction"
                text="Generate Domain Classes"
                description="Generate domain classes from library classes with Lombok annotations">
            <!-- Add to editor and project view menus -->
            <add-to-group group-id="EditorPopupMenu" anchor="last"/>
            <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
            <!-- Windows/Linux shortcut -->
            <keyboard-shortcut first-keystroke="ctrl shift E" keymap="$default"/>
            <!-- macOS shortcut -->
            <keyboard-shortcut first-keystroke="meta shift E" keymap="Mac OS X"/>
        </action>
    </actions>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <!-- Notification group for showing messages to users -->
        <notificationGroup id="DomainGenerator.Notifications"
                          displayType="BALLOON"/>
    </extensions>
</idea-plugin>